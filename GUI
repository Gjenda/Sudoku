    # -*- coding: utf-8 -*-
"""
Created on Fri May 19 17:58:14 2023

@author: vduon
"""

# -*- coding: utf-8 -*-
"""
Created on Sat Mar 18 11:50:10 2023

@author: vduon
"""

import tkinter as tk
from tkinter import scrolledtext
import csv
import random
import winsound
import pygame.mixer
import time
from tkinter import messagebox

from Grid import Grid

class GUI():
    def __init__(self, initial_grid, solved_grid):    
        self.solved_sudoku = solved_grid # We define self.solved_sudoku as the dictionnary that is given in entry in the Main class
        self.actual_grid = initial_grid
        
        self.grid = Grid(initial_grid, solved_grid)
        
        self.racine = tk.Tk()       
        self.racine.configure(bg='gray85')
        self.creation_grid()        # Creation of the grid (entry boxes)
        self.creation_widgets_game()    # Creation of the other functionnalities of our game (solution, hint, timer, exit)
        self.debut_grid()       # Display the first answers to guide the player
        self.start_timer()
        
    def creation_widgets_game(self):   # Creation of the other functionalities of the game
        """doc
        """
        self.exit_button = tk.Button(self.racine, text="EXIT", font="Calibri 12 bold")
        self.exit_button.grid(row=10, column = 9)
        self.exit_button.bind('<Button-1>', self.close_windows)
        
        self.solution_button = tk.Button(self.racine, text="SOLUTION", font="Calibri 12 bold")
        self.solution_button.grid(row=10, column = 1, columnspan = 2)
        self.solution_button.bind('<Button-1>', self.show_solution)
        
        self.start_hint_button = tk.Button(self.racine, text="START HINT", font="Calibri 12 bold")
        self.start_hint_button.grid(row=10, column=3, columnspan=3)
        self.start_hint_button.bind('<Button-1>', self.show_hint)        
        
        self.stop_hint_button = tk.Button(self.racine, text="STOP HINT", font="Calibri 12 bold")
        self.stop_hint_button.grid(row=10, column=5, columnspan=3) 
        self.stop_hint_button.bind('<Button-1>', self.stop_hint)
        
        self.time = 0
        self.time_text = tk.Label(self.racine, text = "TIME : ", font = 'Calibri 12 bold')
        self.time_text.grid(row = 0, column = 2)
        self.timer_label = tk.Label(self.racine, text="",font = 'Calibri 12 bold', fg = 'red')
        self.timer_label.grid(row=0, column = 3)
        #self.start_timer()
        
    def creation_grid(self):        # Creation of the entry boxes in a loop + the callback functions linked to them
        self.cells = {}
        self.storage_entries = {}
        # We created a list to store the positions of every boxes in a the format (COLUMN, ROW, #SQUARE)
        self.box_positions_list = [(1,1,1),
        (2,1,1),
        (3,1,1),
        (1,1,2),
        (2,1,2),
        (3,1,2),
        (1,1,3),
        (2,1,3),
        (3,1,3),
        (1,2,1),
        (2,2,1),
        (3,2,1),
        (1,2,2),
        (2,2,2),
        (3,2,2),
        (1,2,3),
        (2,2,3),
        (3,2,3),
        (1,3,1),
        (2,3,1),
        (3,3,1),
        (1,3,2),
        (2,3,2),
        (3,3,2),
        (1,3,3),
        (2,3,3),
        (3,3,3),
        (1,1,4),
        (2,1,4),
        (3,1,4),
        (1,1,5),
        (2,1,5),
        (3,1,5),
        (1,1,6),
        (2,1,6),
        (3,1,6),
        (1,2,4),
        (2,2,4),
        (3,2,4),
        (1,2,5),
        (2,2,5),
        (3,2,5),
        (1,2,6),
        (2,2,6),
        (3,2,6),
        (1,3,4),
        (2,3,4),
        (3,3,4),
        (1,3,5),
        (2,3,5),
        (3,3,5),
        (1,3,6),
        (2,3,6),
        (3,3,6),
        (1,1,7),
        (2,1,7),
        (3,1,7),
        (1,1,8),
        (2,1,8),
        (3,1,8),
        (1,1,9),
        (2,1,9),
        (3,1,9),
        (1,2,7),
        (2,2,7),
        (3,2,7),
        (1,2,8),
        (2,2,8),
        (3,2,8),
        (1,2,9),
        (2,2,9),
        (3,2,9),
        (1,3,7),
        (2,3,7),
        (3,3,7),
        (1,3,8),
        (2,3,8),
        (3,3,8),
        (1,3,9),
        (2,3,9),
        (3,3,9)]
        
        self.dictionary_positions_id = {}       #Dictionary that stores : KEY => box_position, VALUE => box_id
        self.dictionary_id_values = {}          #Dictionary that stores : KEY => box_id, VALUE => box_value
        self.dictionary_positions_value = {}
        self.entries_ids = []       # List to store all the id number of the entry boxes that are created          
        self.entries_widget_list = [] 
        self.dictionary_widget_id = {}
        
        for row in range(1, 10):
            for column in range(1, 10):
                if ((row in (1,2,3,7,8,9) and column in (4,5,6)) or (row in (4,5,6) and column in (1,2,3,7,8,9))):
                    color='skyblue1'
                else:
                    color='royalblue1'
                # To get a better visual, we change the color of the background for different #square number
                cell = tk.Frame(self.racine, highlightbackground=color, highlightcolor=color, highlightthickness=1, width=50, height=50, padx=3,  pady=3, background='black')
                cell.grid(row=row, column=column)
                self.cells[(row, column)] = cell
                
                # We create the entry boxes
                e = tk.Entry(self.cells[row, column], justify='center')
                e.place(height=40, width=40) #Entry box a little bit smaller than background to see the colors
                e.bind('<Return>', self.update_player_grid)
                #e.bind('<Button-1>', show_id)      Command just to check that the program returns us the id of the box we just cliked on
                self.entries_ids.append(e.winfo_id())  # Add the id of the box into a list storing all the id of the 81 boxes   
                self.entries_widget_list.append(e)
        
        self.dictionary_id_values = {key: 0 for key in self.entries_ids}
        self.storage_positions_and_id(self.box_positions_list, self.entries_ids) # Merge the list of the box positions and the list of the ids into one single dictionary
        self.dictionary_positions_widget = {k: v for k, v in zip(self.box_positions_list, self.entries_widget_list)}
            
    #SECONDARY FUNCTIONS
        
        
    def start_timer(self):
        """doc
        """
        self.time += 1
        self.timer_label.config(text=str(self.time))
        self.timer_id = self.racine.after(1000, self.start_timer)
        
    def stop_timer(self):
        self.racine.after_cancel(self.timer_id)
        
        
    def close_windows(self, event):     # Close all the actual Sudoku window if the button EXIT is pressed
        self.racine.destroy()
        
    def update_actual_sudoku_d3(self):
        for box_position, box_id in self.dictionary_positions_id.items():
            self.dictionary_positions_value[box_position] = self.dictionary_id_values[box_id]
        
    def update_player_grid(self,event):     # Take into account the try that player did and check with the solved_grid if it is correct or not
        
        widget = event.widget
        
        for box_id, box_value in self.dictionary_id_values.items():
            if widget.winfo_id() == box_id:
                if len(widget.get()) == 0:
                    self.dictionary_id_values[box_id] = 0
                else:
                    self.dictionary_id_values[box_id] = int(widget.get())
        print(self.dictionary_id_values)
        self.update_actual_sudoku_d3()
        
        self.result_player_try = self.grid.evaluate_move(self.dictionary_positions_value)
        

        if self.result_player_try:
            widget.config(bg='white')
        else:
            widget.config(bg='red')
        
        
            
    def show_id(self,event):        # OPTIONAL : Display the id of the box that has just been clicked on
        widget = event.widget
        for box_position, box_id in self.dictionary_positions_id.items():
            if widget.winfo_id() == box_id:
                print((box_position, box_id))

    def storage_positions_and_id(self,box_position_list,box_id_list): # Merge the list of the box positions and the list of the ids into one single dictionary
            self.dictionary_positions_id = {k: v for k, v in zip(box_position_list, box_id_list)}  
    
    def debut_grid(self):   # Display the value of certain box positions at the beginning of the game to guide the player
    
        
        
        
        for position1, value in self.actual_grid.items():
            for position2, widget in self.dictionary_positions_widget.items():
                if position1 == position2:
                    if value != 0:
                        widget.insert(0, str(value))
                    for box_id, box_widget in self.dictionary_widget_id.items():
                        if box_widget == widget:
                            self.dictionary_id_values[box_id] = value
        self.update_actual_sudoku_d3()
    
    def show_solution(self, event):
        """
        """
        self.stop_timer()
        for position1, value in self.solved_sudoku.items():
            for position2, widget in self.dictionary_positions_widget.items():
                print(position2, widget)
                if position1 == position2:
                    widget.delete(0, tk.END)
                    widget.insert(0, str(value))
        messagebox.showinfo("Message Box", "You finished the game !")
        
        
    def show_hint(self, event): # This is our TIMER
        """
        """
        self.changing_item = []
        selected_item= random.sample(self.solved_sudoku.items(), 1)
        print(selected_item)
        self.changing_item_dico = dict(selected_item)
        print(self.changing_item_dico)
        for position, value in self.changing_item_dico.items():
            self.changing_item.append(position)
            self.changing_item.append(value)
        for box_position, widget in self.dictionary_positions_widget.items():
            print(box_position, widget)
            if box_position == self.changing_item[0]:
                widget.insert(0, str(self.changing_item[1]))
        
        
    def stop_hint(self, event):
        """
        """
        
        
    
     
    
